{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
		"name": "AuthKit",
		"description": "Complete API collection for AuthKit with RBAC\n\n## Features:\n- User Authentication & Registration\n- Role-Based Access Control (RBAC)\n- Email Verification & Password Reset\n- User Profile Management\n- Admin Operations\n\n## Setup:\n1. Set environment variables (base_url, email, password)\n2. Run 'Health Check' to verify API is running\n3. Register a new user or login with existing credentials\n4. The collection will automatically set auth tokens\n\n## Environment Variables:\n- `base_url`: http://localhost:8001\n- `api_prefix`: /api/v1\n- `admin_email`: admin email for superuser operations\n- `admin_password`: admin password\n- `test_email`: test user email\n- `test_password`: test user password",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üè• Health & Status",
			"item": [
				{
					"name": "Root Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Database Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/db",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "Readiness Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/ready",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								"ready"
							]
						}
					},
					"response": []
				},
				{
					"name": "Liveness Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/live",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								"live"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.environment.set(\"user_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"confirm_password\": \"{{test_password}}\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"username\": \"testuser\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/register",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('refresh_token');",
									"    ",
									"    // Store tokens in environment",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/login",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('refresh_token');",
									"    ",
									"    // Store admin tokens in environment",
									"    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
									"    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/login",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has new tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('refresh_token');",
									"    ",
									"    // Update tokens in environment",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/refresh",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/me",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/forgot-password",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"reset_token_here\",\n  \"new_password\": \"newpassword123\",\n  \"confirm_password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/reset-password",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"current_password\": \"{{test_password}}\",\n  \"new_password\": \"newpassword123\",\n  \"confirm_password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/change-password",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"verification_token_here\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/verify-email",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend Verification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/auth/resend-verification",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"auth",
								"resend-verification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë§ User Management",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has profile data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('full_name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/users/profile",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Updated\",\n  \"last_name\": \"User\",\n  \"bio\": \"Updated bio information\",\n  \"phone\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/users/profile",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has users list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('users');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('page');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/users/?skip=0&limit=10&search=&is_active=true",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "is_active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/users/{{user_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User (Admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_active\": true,\n  \"is_verified\": true,\n  \"first_name\": \"Admin Updated\",\n  \"last_name\": \"User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/users/{{user_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Admin)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/users/{{user_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Statistics (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/users/stats/overview",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"users",
								"stats",
								"overview"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîë Permissions Management",
			"item": [
				{
					"name": "Create Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"permission_id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Permission\",\n  \"codename\": \"test.create\",\n  \"description\": \"Permission to create test resources\",\n  \"resource\": \"test\",\n  \"action\": \"create\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/permissions",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has permissions list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"    pm.expect(jsonData).to.have.property('total');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/permissions?skip=0&limit=50",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"permissions"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Permission by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/permissions/{{permission_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"permissions",
								"{{permission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Permission",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Permission\",\n  \"description\": \"Updated permission description\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/permissions/{{permission_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"permissions",
								"{{permission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Permission",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/permissions/{{permission_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"permissions",
								"{{permission_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• Roles Management",
			"item": [
				{
					"name": "Create Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"role_id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"test_role\",\n  \"description\": \"Test role for API testing\",\n  \"is_default\": false,\n  \"is_active\": true,\n  \"priority\": 15,\n  \"permission_ids\": []\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has roles list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('total');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/?skip=0&limit=20",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Role by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/{{role_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"updated_test_role\",\n  \"description\": \"Updated test role description\",\n  \"priority\": 20\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/{{role_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/{{role_id}}",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/stats/overview",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"stats",
								"overview"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîó Role Assignment",
			"item": [
				{
					"name": "Assign Roles to User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"role_ids\": [\"{{role_id}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/assign",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Assign Roles",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_ids\": [\"{{user_id}}\"],\n  \"role_ids\": [\"{{role_id}}\"],\n  \"operation\": \"add\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/bulk-assign",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"bulk-assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User Permission",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"permission_codename\": \"user.read\"\n}"
						},
						"url": {
							"raw": "{{base_url}}{{api_prefix}}/roles/check-permission",
							"host": [
								"{{base_url}}{{api_prefix}}"
							],
							"path": [
								"roles",
								"check-permission"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä Test Scenarios",
			"item": [
				{
					"name": "Complete User Journey",
					"item": [
						{
							"name": "1. Register New User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User registration successful\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"journey_user_id\", jsonData.id);",
											"    pm.environment.set(\"journey_email\", jsonData.email);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"journey-{{$randomEmail}}\",\n  \"password\": \"testpassword123\",\n  \"confirm_password\": \"testpassword123\",\n  \"first_name\": \"Journey\",\n  \"last_name\": \"User\",\n  \"username\": \"journey{{$randomInt}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/auth/register",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Login User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User login successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"journey_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{journey_email}}\",\n  \"password\": \"testpassword123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/auth/login",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Profile retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"journey_email\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{journey_access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/users/profile",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Update Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Profile updated successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bio).to.include(\"Updated during journey test\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{journey_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bio\": \"Updated during journey test - {{$timestamp}}\",\n  \"phone\": \"+1{{$randomPhoneNumber}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/users/profile",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RBAC Flow Test",
					"item": [
						{
							"name": "1. Create Test Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"test_permission_id\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Test Flow Permission\",\n  \"codename\": \"test_flow.execute\",\n  \"description\": \"Permission for RBAC flow testing\",\n  \"resource\": \"test_flow\",\n  \"action\": \"execute\",\n  \"is_active\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/roles/permissions",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"roles",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create Test Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"test_role_id\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"test_flow_role\",\n  \"description\": \"Role for RBAC flow testing\",\n  \"is_default\": false,\n  \"is_active\": true,\n  \"priority\": 25,\n  \"permission_ids\": [\"{{test_permission_id}}\"]\n}"
								},
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/roles/",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"roles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Assign Role to User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Role assigned successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": \"{{journey_user_id}}\",\n  \"role_ids\": [\"{{test_role_id}}\"]\n}"
								},
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/roles/assign",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"roles",
										"assign"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Verify User Has Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User has permission\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.has_permission).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": \"{{journey_user_id}}\",\n  \"permission_codename\": \"test_flow.execute\"\n}"
								},
								"url": {
									"raw": "{{base_url}}{{api_prefix}}/roles/check-permission",
									"host": [
										"{{base_url}}{{api_prefix}}"
									],
									"path": [
										"roles",
										"check-permission"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set timestamp for dynamic data",
					"pm.globals.set(\"timestamp\", Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Global test to check content type for JSON responses",
					"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
					"    pm.test(\"Response has valid JSON\", function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8001",
			"type": "string"
		},
		{
			"key": "api_prefix",
			"value": "/api/v1",
			"type": "string"
		}
	]
}